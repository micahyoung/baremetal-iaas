package stemcell

import (
	"fmt"
	"io"
	"io/ioutil"
	"os"

	"github.com/nerd2/gexto"
)

var imageRootDiskKernelPath = "/vmlinuz"
var imageRootDiskInitRDPath = "/initrd.img"

type DiskClient struct{}

func NewDiskClient() *DiskClient {
	return &DiskClient{}
}

func (c *DiskClient) ExtractRootDiskBootFiles(rootDiskPath string, kernelFile *os.File, initRDFile *os.File) error {
	var err error

	var rootDiskFile *os.File
	var ext4FileSystem gexto.FileSystem

	var rootPartitionTempFile *os.File
	if rootPartitionTempFile, err = ioutil.TempFile("", "baremetal-root-partition.img"); err != nil {
		return err
	}
	defer os.RemoveAll(rootPartitionTempFile.Name())

	if rootDiskFile, err = os.Open(rootDiskPath); err != nil {
		return err
	}

	skipMbrBytes := int64(63 * 512)
	skippedBytes, err := rootDiskFile.Seek(skipMbrBytes, 0)
	if err != nil {
		return err
	}

	fmt.Printf("skipped bytes: %d\n", skippedBytes)

	copiedBytes, err := io.Copy(rootPartitionTempFile, rootDiskFile)
	if err != nil {
		return err
	}
	defer rootPartitionTempFile.Close()

	fmt.Printf("copied bytes: %d\n", copiedBytes)

	if ext4FileSystem, err = gexto.NewFileSystem(rootPartitionTempFile.Name()); err != nil {
		return err
	}
	defer ext4FileSystem.Close()

	var bootDir *gexto.File
	if bootDir, err = ext4FileSystem.Open("/vmlinuz"); err != nil {
		return err
	}

	_, err = io.Copy(kernelFile, bootDir)
	if err != nil {
		return err
	}

	// var kernelImageFile *gexto.File
	// kernelImageFile, err = c.findFileWithPrefix("/boot/vmlinux-")
	// if err != nil {
	// 	return err
	// }

	// var initRDImageFile *gexto.File
	// initRDImageFile, err = c.findFileWithPrefix("/boot/initrd.img-")
	// if err != nil {
	// 	return err
	// }

	// _, err = io.Copy(initRDFile, initRDImageFile)
	// if err != nil {
	// 	return err
	// }

	// _, err = io.Copy(kernelFile, kernelImageFile)
	// if err != nil {
	// 	return err
	// }

	return nil
}
